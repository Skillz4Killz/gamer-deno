// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model automod {
  guildId              String   @id
  publicRoleIds        String[]
  muteRoleId           String
  capitalPercentage    Int
  profanityEnabled     Boolean
  profanityWords       String[]
  profanityStrictWords String[]
  profanityPhrases     String[]
  linksEnabled         Boolean
  linksChannelIds      String[]
  linksUserIds         String[]
  linksRoleIds         String[]
  linksUrls            String[]
  linksRestrictedUrls  String[]
}

model autoreact {
  guildId   String
  channelId String   @id
  reactions String[]
}

enum BlacklistedType {
  User
  Guild
}

model blacklisted {
  id   String          @id
  type BlacklistedType
}

model client {
  id                        String @id
  automod                   String
  commandsRan               String
  messagesSent              String
  feedbacksSent             String
  messagesEdited            String
  messagesDeleted           String
  messagesProcessed         String
  reactionsAddedProcessed   String
  reactionsRemovedProcessed String
}

model commands {
  /// guildId-commandName
  id                  String   @id
  guildId             String
  enabled             Boolean
  exceptionRoleIds    String[]
  exceptionChannelIds String[]
}

model counting {
  count         Int
  buffs         Int[]
  debuffs       Int[]
  guildId       String
  localOnly     Boolean
  channelId     String  @id
  loserRoleId   String?
  deleteInvalid Boolean
}

model defaultRoleSets {
  name          String   @id
  guildId       String
  roleIds       String[]
  defaultRoleId String
}

model emojis {
  name    String
  userId  String
  emojiId String @id
  unicode String
  guildId String
}

model enterprise {
  botId    String   @id
  botName  String
  botToken String
  guildIds String[]
}

model events {
  id                       Int      @id @default(autoincrement())
  userId                   String
  endsAt                   DateTime
  eventId                  Int
  guildId                  String
  startsAt                 DateTime
  messageId                String
  createdAt                DateTime
  isRecurring              Boolean
  minutesFromNow           Int
  game                     String
  title                    String
  platform                 String
  activity                 String
  frequency                Int?
  description              String
  dmReminders              Boolean
  showUtcTime              Boolean
  backgroundUrl            String?
  showAttendees            Boolean
  channelReminders         Boolean
  removeRecurringAttendees Boolean
  reminders                Int[]
  executedReminders        Int[]
  hasStarted               Boolean
  duration                 Int
  maxAttendees             Int
  deniedUserIds            String[]
  bannedUserIds            String[]
  allowedRoleIds           String[]
  alertRoleIds             String[]
  joinRoleId               String
  maybeUserIds             String[]
  cardChannelId            String?
  cardMessageId            String?
  templateName             String?

  positions     EventPosition[]
  waitingUsers  EventWaiting[]
  acceptedUsers EventAttendee[]
}

model EventWaiting {
  id       Int    @id @default(autoincrement())
  userId   String
  eventId  Int
  position String

  event events @relation(fields: [eventId], references: [id])
}

model EventAttendee {
  id       Int      @id @default(autoincrement())
  userId   String
  eventId  Int
  position String
  joinedAt DateTime

  event events @relation(fields: [eventId], references: [id])
}

model EventPosition {
  id      Int    @id @default(autoincrement())
  name    String
  amount  Int
  eventId Int

  event events @relation(fields: [eventId], references: [id])
}

model facebook {
  id        String  @id
  text      String
  filter    String?
  username  String
  guildId   String
  channelId String
}

model feedbacks {
  id          String  @id
  userId      String
  guildId     String
  isBugReport Boolean
}

model feedbackSettings {
  guildId           String  @id
  approvalChannelId String?
  solvedChannelId   String?
  rejectedChannelId String?
  solvedMessage     String?
  rejectedMessage   String?
  logChannelId      String?
  ideaChannelId     String?
  // TODO: ideaQuestions String[]
  bugsChannelId     String?
  // TODO: bugsQuestions String[]
}

model giveaways {
  id                     Int      @id @default(autoincrement())
  emoji                  String?
  simple                 Boolean
  userId                 String
  guildId                String
  duration               Int
  hasEnded               Boolean
  messageId              String
  createdAt              DateTime
  channelId              String
  setRoleIds             String[]
  requireIgn             Boolean
  costToJoin             Int
  hasStarted             Boolean
  pickWinners            Boolean
  pickInterval           Int?
  delayTillStart         Int?
  blockedUserIds         String[]
  allowDuplicates        Boolean
  amountOfWinners        Int
  duplicateCooldown      Int?
  allowCommandEntry      Boolean
  allowReactionEntry     Boolean
  requiredRoleIdsToJoin  String[]
  notificationsChannelId String?

  participants       GiveawayParticipant[]
  pickedParticipants GiveawayPickedParticipants[]
}

model GiveawayParticipant {
  id         Int      @id @default(autoincrement())
  userId     String
  joinedAt   DateTime
  giveawayId Int

  giveaway giveaways @relation(fields: [giveawayId], references: [id])
}

model GiveawayPickedParticipants {
  id         Int      @id @default(autoincrement())
  userId     String
  joinedAt   DateTime
  giveawayId Int

  giveaway giveaways @relation(fields: [giveawayId], references: [id])
}

model groupedRoleSets {
  id         Int      @id @default(autoincrement())
  name       String
  guildId    String
  roleIds    String[]
  mainRoleId String
}

model guilds {
  id                       String   @id
  prefix                   String?
  language                 String?
  adminRoleId              String?
  modRoleIds               String[]
  tenorEnabled             Boolean
  eventsAdvertiseChannelId String?
  autoEmbedChannelIds      String[]
  disabledTagChannelIds    String[]
  analyticsChannelId       String?
  createEventsRoleId       String?
}

enum ItemGames {
  Counting
}

enum ItemTypes {
  Buff
  Debuff
}

model items {
  id           String    @id
  game         ItemGames
  channelId    String
  memberId     String
  itemId       Int
  type         ItemTypes
  guildId      String
  expiresAt    Int
  currentCount Int?
}

model instagram {
  id           String @id
  text         String
  filter       String
  username     String
  guildId      String
  channelId    String
  webhookId    String
  webhookToken String
}

model labels {
  id          String @id
  name        String
  userId      String
  guildId     String
  categoryId  String
  mainGuildId String
}

model levels {
  /// guildId-level#
  id      String   @id
  level   Int
  guildId String
  roleIds String[]
}

model leveling {
  guildId               String   @id
  xpEnabled             Boolean
  missionsEnabled       Boolean
  xpDecayDays           Int
  xpDecayPercentage     Int
  xpPerMessage          Int
  xpPerMinuteVoice      Int
  allowedBackgroundUrls String[]
  showMarriage          Boolean
  disabledXpChannelIds  String[]
  disabledXpRoleIds     String[]
}

model mails {
  channelId   String @id
  userId      String
  guildId     String
  mainGuildId String
  topic       String
}

model mailSettings {
  guildId          String   @id
  enabled          Boolean
  roleIds          String[]
  modServerId      String?
  logChannelId     String?
  ratingChanelId   String?
  categoryId       String?
  autoResponse     String
  supportChannelId String?

  questions MailQuestion[]
}

model MailQuestion {
  id       Int      @id @default(autoincrement())
  /// The type of response to request from the user.
  type     String
  /// The order number of this question
  order    Int
  /// The options that are allowed if it multiple choice
  options  String[]
  /// The question to ask the user
  question String
  /// The id of the survey
  guildId  String

  mailSettings mailSettings @relation(fields: [guildId], references: [guildId])
}

model mangaAlerts {
  id           String @id
  text         String
  filter       String
  username     String
  guildId      String
  channelId    String
  webhookId    String
  webhookToken String
}

model marriages {
  step     Int
  love     Int
  userId   String  @id
  spouseId String
  accepted Boolean
  lifeStep Int
}

model mirrors {
  id                   String  @id
  filter               String
  anonymous            Boolean
  filterImages         Boolean
  sourceChannelId      String
  mirrorChannelId      String
  sourceGuildId        String
  mirrorGuildId        String
  deleteSourceMessages Boolean
}

model mission {
  /// userId-commandName
  id          String  @id
  userId      String
  amount      Int
  completed   Boolean
  commandName String
}

enum ModlogActions {
  Warn
}

model modlogs {
  id          Int           @id @default(autoincrement())
  modId       String
  action      ModlogActions
  reason      String
  userId      String
  guildId     String
  duration    Int?
  timestamp   DateTime
  messageId   String
  mainGuildId String
  needsUnmute Boolean
}

model modules {
  // both guild ids combined
  id            String @id
  guildId       String
  sourceGuildId String
}

model mutes {
  /// userid-guildid
  id       String   @id
  userId   String
  roleIds  String[]
  guildId  String
  unmuteAt Int
}

model polls {
  endsAt           Int
  userId           String
  guildId          String
  options          String[]
  maxVotes         Int
  question         String
  channelId        String
  messageId        String   @id
  allowedRoleIds   String[]
  resultsChannelId String
}

model pollVotes {
  id     Int    @id @default(autoincrement())
  userId String
  option Int
}

model reddit {
  id           String @id
  text         String
  filter       String
  username     String
  guildId      String
  channelId    String
  webhookId    String
  webhookToken String
}

model reminders {
  id        Int     @id @default(autoincrement())
  content   String
  guildId   String
  interval  Int?
  memberId  String
  channelId String
  recurring Boolean
  timestamp Int
}

model requiredRoleSets {
  id             String   @id
  name           String
  guildId        String
  roleIds        String[]
  requiredRoleId String
}

model roleMessages {
  id              String  @id
  guildId         String
  roleAdded       Boolean
  channelId       String
  roleAddedText   String
  roleRemovedText String
}

model serverLogs {
  guildId                        String   @id
  publicChannelID                String
  modChannelID                   String
  automodChannelID               String
  banAddChannelID                String
  banAddPublic                   Boolean
  banRemoveChannelID             String
  banRemovePublic                Boolean
  roleCreateChannelID            String
  roleCreatePublic               Boolean
  roleDeleteChannelID            String
  roleDeletePublic               Boolean
  roleUpdateChannelID            String
  roleUpdatePublic               Boolean
  roleMembersChannelID           String
  roleMembersPublic              Boolean
  memberAddChannelID             String
  memberAddPublic                Boolean
  memberRemoveChannelID          String
  memberRemovePublic             Boolean
  memberNickChannelID            String
  memberNickPublic               Boolean
  messageDeleteChannelID         String
  messageDeletePublic            Boolean
  messageDeleteIgnoredChannelIDs String[]
  messageDeleteIgnoredRoleIDs    String[]
  messageEditChannelID           String
  messageEditPublic              Boolean
  messageEditIgnoredChannelIDs   String[]
  messageEditIgnoredRoleIDs      String[]
  emojiCreateChannelID           String
  emojiCreatePublic              Boolean
  emojiDeleteChannelID           String
  emojiDeletePublic              Boolean
  channelCreateChannelID         String
  channelCreatePublic            Boolean
  channelDeleteChannelID         String
  channelDeletePublic            Boolean
  channelUpdateChannelID         String
  channelUpdatePublic            Boolean
  channelUpdateIgnoredChannelIDs String[]
  voiceJoinChannelID             String
  voiceJoinPublic                Boolean
  voiceJoinIgnoredChannelIDs     String[]
  voiceLeaveChannelID            String
  voiceLeavePublic               Boolean
  voiceLeaveIgnoredChannelIDs    String[]
  imageChannelID                 String
  imageIgnoredChannelIDs         String[]
  imageIgnoredRoleIDs            String[]
}

model shortcuts {
  id            Int     @id @default(autoincrement())
  name          String
  guildId       String
  deleteTrigger Boolean
  // TODO: actions
}

model spy {
  words  String[]
  userId String   @id
}

model surveys {
  id             Int      @id @default(autoincrement())
  /// The name of the survey
  name           String
  /// The guild where this survey was created
  guildId        String
  /// The person who created this survey.
  creatorId      String
  /// The channel id where the results will be sent for this survey.
  channelId      String
  /// The roles that are allowed to respond to this survey.
  allowedRoleIds String[]
  /// Whether the user must answer questions in DM
  useDM          Boolean

  /// The questions for this survey
  questions SurveyQuestion[]
}

model SurveyQuestion {
  id       Int      @id @default(autoincrement())
  /// The type of response to request from the user.
  type     String
  /// The options that are allowed if it multiple choice
  options  String[]
  /// The question to ask the user
  question String
  /// The id of the survey
  surveyId Int

  survey surveys @relation(fields: [surveyId], references: [id])
}

enum TagsType {
  Basic
  Advanced
  Random
}

model tags {
  id                 Int      @id @default(autoincrement())
  name               String
  type               TagsType
  guildId            String
  mailOnly           String
  isPublic           Boolean
  embedCode          String
  randomOptions      String[]
  secondsUntilDelete Int
}

model todos {
  guildId             String @id
  backlogChannelId    String
  sprintChannelId     String
  nextSprintChannelId String
  archiveChannelId    String
  completedChannelId  String
}

model twitch {
  id           String @id
  text         String
  filter       String
  username     String
  guildId      String
  channelId    String
  webhookId    String
  webhookToken String
}

model twitter {
  id           String @id
  text         String
  filter       String
  username     String
  guildId      String
  channelId    String
  webhookId    String
  webhookToken String
}

model uniqueRolesets {
  id      Int      @id @default(autoincrement())
  name    String
  guildId String
  roleIds String[]
}

enum UsersTheme {
  Light
  Dark
}

model users {
  id            String     @id
  xp            Int
  coins         Int
  theme         UsersTheme
  badges        String[]
  guildIds      String[]
  afkEnabled    Boolean
  afkMessage    String
  description   String
  showMarriage  Boolean
  backgroundId  Int
  backgroundUrl String
}

model verifications {
  guildId                              String   @id
  categoryId                           String?
  enabled                              Boolean
  channelIds                           String[]
  firstMessageJson                     String
  userAutoRoleId                       String?
  botsAutoRoleId                       String?
  discordVerificationStrictnessEnabled Boolean
}

model vipGuilds {
  isVip   Boolean
  userId  String
  guildId String  @id
}

model vipUsers {
  isVip    Boolean
  userId   String   @id
  guildIds String[]
}

model xp {
  id            Int    @id @default(autoincrement())
  xp            Int
  userId        String
  guildId       String
  voiceXp       Int
  lastUpdatedAt Int
  joinedVoiceAt Int
}

model webhooks {
  channelId String @id
  hookId    String
  token     String
}

model welcome {
  id        Int    @id @default(autoincrement())
  text      String
  guildId   String
  channelId String
}

model youtube {
  id           String @id
  text         String
  filter       String
  username     String
  guildId      String
  channelId    String
  webhookId    String
  webhookToken String
}
